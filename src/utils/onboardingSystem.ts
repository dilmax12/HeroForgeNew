import { OnboardingFlow, OnboardingStep } from '../types/onboarding';

export const ONBOARDING_FLOWS: OnboardingFlow[] = [
  {
    id: 'first-steps',
    name: 'Primeiros Passos',
    description: 'Aprenda o b√°sico do HeroForge',
    category: 'beginner',
    steps: [
      {
        id: 'welcome',
        title: 'Bem-vindo ao HeroForge! üéÆ',
        description: 'Vamos come√ßar sua jornada √©pica!',
        content: 'O HeroForge √© um sistema de gamifica√ß√£o que transforma suas tarefas di√°rias em aventuras √©picas. Voc√™ criar√° her√≥is, completar√° miss√µes e evoluir√° suas habilidades!',
        position: 'center',
        skippable: true,
        autoAdvance: false
      },
      {
        id: 'create-hero',
        title: 'Crie seu Primeiro Her√≥i',
        description: 'Todo aventureiro precisa de um her√≥i!',
        content: 'Clique no bot√£o "Criar Her√≥i" para come√ßar. Escolha um nome √©pico e uma classe que combine com voc√™!',
        targetElement: '[data-testid="create-hero-button"]',
        position: 'bottom',
        action: {
          type: 'navigate',
          target: '/heroes/new'
        },
        validation: {
          type: 'hero-created'
        },
        rewards: {
          xp: 50,
          gold: 100
        }
      },
      {
        id: 'hero-overview',
        title: 'Conhe√ßa seu Her√≥i',
        description: 'Vamos explorar as informa√ß√µes do seu her√≥i',
        content: 'Aqui voc√™ pode ver o n√≠vel, experi√™ncia, ouro e estat√≠sticas do seu her√≥i. Essas informa√ß√µes s√£o atualizadas conforme voc√™ completa miss√µes!',
        targetElement: '[data-testid="hero-stats"]',
        position: 'right',
        autoAdvance: true
      },
      {
        id: 'first-quest',
        title: 'Sua Primeira Miss√£o',
        description: 'Hora de come√ßar a aventura!',
        content: 'Vamos ao Quadro de Miss√µes para aceitar sua primeira quest. Clique no √≠cone de pergaminho na navega√ß√£o r√°pida!',
        targetElement: '[data-testid="quick-nav-quests"]',
        position: 'top',
        action: {
          type: 'navigate',
          target: '/quests'
        }
      },
      {
        id: 'accept-quest',
        title: 'Aceite uma Miss√£o',
        description: 'Escolha uma miss√£o adequada ao seu n√≠vel',
        content: 'Procure por miss√µes com dificuldade "F√°cil" ou "Normal". Clique em "Aceitar Miss√£o" para adicion√°-la √†s suas miss√µes ativas!',
        targetElement: '[data-testid="quest-card"]',
        position: 'left',
        validation: {
          type: 'quest-accepted'
        },
        rewards: {
          xp: 25
        }
      },
      {
        id: 'daily-goals',
        title: 'Metas Di√°rias',
        description: 'Ganhe b√¥nus extras todos os dias!',
        content: 'As metas di√°rias oferecem recompensas especiais. Complete-as para ganhar XP e ouro extras! Acesse atrav√©s da navega√ß√£o r√°pida.',
        targetElement: '[data-testid="quick-nav-daily-goals"]',
        position: 'top',
        action: {
          type: 'navigate',
          target: '/daily-goals'
        }
      },
      {
        id: 'tutorial-complete',
        title: 'Tutorial Conclu√≠do! üéâ',
        description: 'Voc√™ est√° pronto para a aventura!',
        content: 'Parab√©ns! Voc√™ aprendeu o b√°sico do HeroForge. Continue completando miss√µes, evoluindo seu her√≥i e desbloqueando novos recursos!',
        position: 'center',
        rewards: {
          xp: 100,
          gold: 200,
          items: ['potion_health', 'scroll_wisdom']
        }
      }
    ]
  },
  {
    id: 'advanced-features',
    name: 'Recursos Avan√ßados',
    description: 'Explore funcionalidades avan√ßadas',
    category: 'intermediate',
    prerequisites: ['first-steps'],
    steps: [
      {
        id: 'guild-system',
        title: 'Sistema de Guildas',
        description: 'Una-se a outros her√≥is!',
        content: 'As guildas permitem colaborar com outros jogadores, compartilhar miss√µes e competir em rankings especiais.',
        targetElement: '[data-testid="quick-nav-guilds"]',
        position: 'top',
        action: {
          type: 'navigate',
          target: '/guilds'
        }
      },
      {
        id: 'equipment-system',
        title: 'Sistema de Equipamentos',
        description: 'Melhore suas estat√≠sticas!',
        content: 'Visite a loja para comprar armas, armaduras e acess√≥rios. Equipamentos melhoram suas estat√≠sticas e efici√™ncia em miss√µes.',
        targetElement: '[data-testid="hero-equipment"]',
        position: 'right'
      },
      {
        id: 'achievements',
        title: 'Sistema de Conquistas',
        description: 'Desbloqueie t√≠tulos especiais!',
        content: 'Complete desafios espec√≠ficos para ganhar conquistas e t√≠tulos √∫nicos. Alguns t√≠tulos oferecem b√¥nus permanentes!',
        targetElement: '[data-testid="achievements-tab"]',
        position: 'bottom'
      },
      {
        id: 'leaderboards',
        title: 'Rankings Globais',
        description: 'Compete com outros her√≥is!',
        content: 'Veja como voc√™ se compara a outros jogadores em diferentes categorias: XP, ouro, miss√µes completadas e muito mais!',
        targetElement: '[data-testid="quick-nav-leaderboards"]',
        position: 'top',
        action: {
          type: 'navigate',
          target: '/leaderboards'
        }
      }
    ]
  },
  {
    id: 'power-user',
    name: 'Usu√°rio Avan√ßado',
    description: 'Domine todas as funcionalidades',
    category: 'advanced',
    prerequisites: ['first-steps', 'advanced-features'],
    steps: [
      {
        id: 'narrative-quests',
        title: 'Miss√µes Narrativas',
        description: 'Experi√™ncias imersivas!',
        content: 'As miss√µes narrativas oferecem hist√≥rias envolventes com m√∫ltiplas escolhas e consequ√™ncias. Cada decis√£o afeta o resultado!',
        targetElement: '[data-testid="narrative-quests-tab"]',
        position: 'bottom'
      },
      {
        id: 'reputation-system',
        title: 'Sistema de Reputa√ß√£o',
        description: 'Construa relacionamentos!',
        content: 'Sua reputa√ß√£o com diferentes fac√ß√µes afeta as miss√µes dispon√≠veis e recompensas. Escolha suas alian√ßas sabiamente!',
        targetElement: '[data-testid="reputation-tab"]',
        position: 'right'
      },
      {
        id: 'advanced-strategies',
        title: 'Estrat√©gias Avan√ßadas',
        description: 'Otimize sua progress√£o!',
        content: 'Combine equipamentos, planeje suas miss√µes di√°rias e use consum√≠veis estrategicamente para maximizar seus ganhos!',
        position: 'center'
      }
    ]
  }
];

export class OnboardingManager {
  private static instance: OnboardingManager;
  private currentFlow?: OnboardingFlow;
  private currentStepIndex: number = 0;
  private completedFlows: Set<string> = new Set();
  private completedSteps: Set<string> = new Set();
  private isActive: boolean = false;
  private callbacks: Map<string, Function[]> = new Map();

  static getInstance(): OnboardingManager {
    if (!OnboardingManager.instance) {
      OnboardingManager.instance = new OnboardingManager();
    }
    return OnboardingManager.instance;
  }

  startFlow(flowId: string): boolean {
    const flow = ONBOARDING_FLOWS.find(f => f.id === flowId);
    if (!flow) return false;

    // Check prerequisites
    if (flow.prerequisites) {
      const hasPrerequisites = flow.prerequisites.every(prereq => 
        this.completedFlows.has(prereq)
      );
      if (!hasPrerequisites) return false;
    }

    this.currentFlow = flow;
    this.currentStepIndex = 0;
    this.isActive = true;
    this.emit('flow-started', { flow });
    this.emit('step-changed', { step: this.getCurrentStep() });
    return true;
  }

  getCurrentStep(): OnboardingStep | null {
    if (!this.currentFlow || !this.isActive) return null;
    return this.currentFlow.steps[this.currentStepIndex] || null;
  }

  nextStep(): boolean {
    if (!this.currentFlow || !this.isActive) return false;

    const currentStep = this.getCurrentStep();
    if (currentStep) {
      this.markStepCompleted(currentStep.id);
      this.emit('step-completed', { step: currentStep });
    }

    this.currentStepIndex++;
    
    if (this.currentStepIndex >= this.currentFlow.steps.length) {
      this.completeFlow();
      return false;
    }

    this.emit('step-changed', { step: this.getCurrentStep() });
    return true;
  }

  previousStep(): boolean {
    if (!this.currentFlow || !this.isActive || this.currentStepIndex <= 0) return false;
    
    this.currentStepIndex--;
    this.emit('step-changed', { step: this.getCurrentStep() });
    return true;
  }

  skipStep(): boolean {
    const currentStep = this.getCurrentStep();
    if (!currentStep || !currentStep.skippable) return false;
    
    return this.nextStep();
  }

  completeFlow(): void {
    if (!this.currentFlow) return;

    this.completedFlows.add(this.currentFlow.id);
    this.emit('flow-completed', { flow: this.currentFlow });
    this.reset();
  }

  reset(): void {
    this.currentFlow = undefined;
    this.currentStepIndex = 0;
    this.isActive = false;
    this.emit('onboarding-reset');
  }

  markStepCompleted(stepId: string): void {
    this.completedSteps.add(stepId);
  }

  isStepCompleted(stepId: string): boolean {
    return this.completedSteps.has(stepId);
  }

  isFlowCompleted(flowId: string): boolean {
    return this.completedFlows.has(flowId);
  }

  getAvailableFlows(): OnboardingFlow[] {
    return ONBOARDING_FLOWS.filter(flow => {
      if (this.isFlowCompleted(flow.id)) return false;
      
      if (flow.prerequisites) {
        return flow.prerequisites.every(prereq => this.isFlowCompleted(prereq));
      }
      
      return true;
    });
  }

  getProgress(): { completed: number; total: number; percentage: number } {
    const totalSteps = ONBOARDING_FLOWS.reduce((sum, flow) => sum + flow.steps.length, 0);
    const completedSteps = this.completedSteps.size;
    
    return {
      completed: completedSteps,
      total: totalSteps,
      percentage: totalSteps > 0 ? Math.round((completedSteps / totalSteps) * 100) : 0
    };
  }

  // Event system
  on(event: string, callback: Function): void {
    if (!this.callbacks.has(event)) {
      this.callbacks.set(event, []);
    }
    this.callbacks.get(event)!.push(callback);
  }

  off(event: string, callback: Function): void {
    const callbacks = this.callbacks.get(event);
    if (callbacks) {
      const index = callbacks.indexOf(callback);
      if (index > -1) {
        callbacks.splice(index, 1);
      }
    }
  }

  private emit(event: string, data?: any): void {
    const callbacks = this.callbacks.get(event);
    if (callbacks) {
      callbacks.forEach(callback => callback(data));
    }
  }

  // Persistence
  saveState(): void {
    const state = {
      completedFlows: Array.from(this.completedFlows),
      completedSteps: Array.from(this.completedSteps),
      currentFlow: this.currentFlow?.id,
      currentStepIndex: this.currentStepIndex,
      isActive: this.isActive
    };
    localStorage.setItem('heroforge-onboarding', JSON.stringify(state));
  }

  loadState(): void {
    const saved = localStorage.getItem('heroforge-onboarding');
    if (saved) {
      try {
        const state = JSON.parse(saved);
        this.completedFlows = new Set(state.completedFlows || []);
        this.completedSteps = new Set(state.completedSteps || []);
        this.currentStepIndex = state.currentStepIndex || 0;
        this.isActive = state.isActive || false;
        
        if (state.currentFlow && this.isActive) {
          this.currentFlow = ONBOARDING_FLOWS.find(f => f.id === state.currentFlow);
        }
      } catch (error) {
        console.error('Failed to load onboarding state:', error);
      }
    }
  }
}

export const onboardingManager = OnboardingManager.getInstance();